"use server";

import { createClient } from "@/lib/supabase/server";
import { revalidatePath } from "next/cache";
import { redirect } from "next/navigation";
import { Post } from "@/types";

export interface PostFormData {
  title: string;
  description?: string;
  status_id: string;
  assignee_id?: string;
  start_date?: string;
  end_date?: string;
  eta?: string;
  tags?: string[];
  priority?: 'low' | 'medium' | 'high' | 'urgent';
  progress?: number;
  parent_id?: string;
}

export async function getPostsByRoadmapId(roadmapId: string): Promise<Post[]> {
  try {
    console.log(`Getting posts for roadmap ID: ${roadmapId}`);
    const supabase = await createClient();
    
    // Check if posts table exists
    const { data: tablesData, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .eq('table_name', 'posts');
    
    if (tablesError) {
      console.error("Error checking tables:", tablesError);
    } else {
      console.log("Tables check:", tablesData);
    }
    
    // Fetch posts (not deleted)
    const { data: posts, error } = await supabase
      .from("posts")
      .select(`
        *,
        status:status_id (*),
        assignee:assignee_id (id, email, display_name, avatar_url),
        creator:created_by (id, email, display_name),
        updater:updated_by (id, email, display_name)
      `)
      .eq("roadmap_id", roadmapId)
      .is("deleted_at", null)
      .order("order_index");
    
    if (error) {
      console.error("Error fetching posts:", error);
      return [];
    }
    
    // Early return if no posts
    if (!posts || posts.length === 0) {
      console.log("No posts found for this roadmap");
      return [];
    }
    
    console.log(`Found ${posts.length} posts`);
    return posts;
  } catch (error) {
    console.error("Error in getPostsByRoadmapId:", error);
    return [];
  }
}

export async function getPostById(postId: string): Promise<Post | null> {
  try {
    const supabase = await createClient();
    
    const { data: post, error } = await supabase
      .from("posts")
      .select(`
        *,
        status:status_id (*),
        assignee:assignee_id (id, email, display_name, avatar_url),
        creator:created_by (id, email, display_name),
        updater:updated_by (id, email, display_name)
      `)
      .eq("id", postId)
      .is("deleted_at", null)
      .single();
    
    if (error) {
      console.error("Error fetching post:", error);
      return null;
    }
    
    return post;
  } catch (error) {
    console.error("Error in getPostById:", error);
    return null;
  }
}

export async function createPost(
  roadmapId: string,
  data: PostFormData
): Promise<{ data: Post | null; error: Error | null }> {
  try {
    const supabase = await createClient();
    const { data: { user } } = await supabase.auth.getUser();

    if (!user) {
      return { data: null, error: new Error("Not authenticated") };
    }

    // Check if user owns the roadmap
    const { data: roadmap, error: roadmapError } = await supabase
      .from("roadmaps")
      .select("owner_id")
      .eq("id", roadmapId)
      .single();

    if (roadmapError || !roadmap) {
      return { data: null, error: new Error("Roadmap not found") };
    }

    if (roadmap.owner_id !== user.id) {
      return { data: null, error: new Error("Not authorized") };
    }

    // Get max order for this status to place the new post at the end
    const { data: maxOrderPost } = await supabase
      .from("posts")
      .select("order_index")
      .eq("roadmap_id", roadmapId)
      .eq("status_id", data.status_id)
      .order("order_index", { ascending: false })
      .limit(1)
      .single();

    const nextOrder = maxOrderPost ? maxOrderPost.order_index + 1 : 0;

    // Create the post
    const { data: post, error: postError } = await supabase
      .from("posts")
      .insert({
        roadmap_id: roadmapId,
        title: data.title,
        description: data.description || null,
        status_id: data.status_id,
        assignee_id: data.assignee_id || null,
        start_date: data.start_date || null,
        end_date: data.end_date || null,
        eta: data.eta || null,
        tags: data.tags || [],
        priority: data.priority || null,
        progress: data.progress || 0,
        parent_id: data.parent_id || null,
        order_index: nextOrder,
        created_by: user.id,
        updated_by: user.id
      })
      .select()
      .single();

    if (postError) {
      return { data: null, error: new Error(postError.message) };
    }

    revalidatePath(`/roadmaps/${roadmapId}`);
    return { data: post, error: null };
  } catch (error: any) {
    return { data: null, error };
  }
}

export async function updatePost(
  postId: string,
  data: PostFormData
): Promise<{ success: boolean; error: Error | null }> {
  try {
    const supabase = await createClient();
    const { data: { user } } = await supabase.auth.getUser();

    if (!user) {
      return { success: false, error: new Error("Not authenticated") };
    }

    // Get post to check ownership
    const { data: post, error: postError } = await supabase
      .from("posts")
      .select("roadmap_id")
      .eq("id", postId)
      .single();

    if (postError || !post) {
      return { success: false, error: new Error("Post not found") };
    }

    // Check if user owns the roadmap
    const { data: roadmap, error: roadmapError } = await supabase
      .from("roadmaps")
      .select("owner_id")
      .eq("id", post.roadmap_id)
      .single();

    if (roadmapError || !roadmap) {
      return { success: false, error: new Error("Roadmap not found") };
    }

    if (roadmap.owner_id !== user.id) {
      return { success: false, error: new Error("Not authorized") };
    }

    // Update the post
    const { error: updateError } = await supabase
      .from("posts")
      .update({
        title: data.title,
        description: data.description || null,
        status_id: data.status_id,
        assignee_id: data.assignee_id || null,
        start_date: data.start_date || null,
        end_date: data.end_date || null,
        eta: data.eta || null,
        tags: data.tags || [],
        priority: data.priority || null,
        progress: data.progress || null,
        parent_id: data.parent_id || null,
        updated_by: user.id,
        updated_at: new Date().toISOString()
      })
      .eq("id", postId);

    if (updateError) {
      return { success: false, error: new Error(updateError.message) };
    }

    revalidatePath(`/roadmaps/${post.roadmap_id}`);
    return { success: true, error: null };
  } catch (error: any) {
    return { success: false, error };
  }
}

export async function deletePost(
  postId: string
): Promise<{ success: boolean; error: Error | null }> {
  try {
    const supabase = await createClient();
    const { data: { user } } = await supabase.auth.getUser();

    if (!user) {
      return { success: false, error: new Error("Not authenticated") };
    }

    // Get post to check ownership
    const { data: post, error: postError } = await supabase
      .from("posts")
      .select("roadmap_id")
      .eq("id", postId)
      .single();

    if (postError || !post) {
      return { success: false, error: new Error("Post not found") };
    }

    // Check if user owns the roadmap
    const { data: roadmap, error: roadmapError } = await supabase
      .from("roadmaps")
      .select("owner_id")
      .eq("id", post.roadmap_id)
      .single();

    if (roadmapError || !roadmap) {
      return { success: false, error: new Error("Roadmap not found") };
    }

    if (roadmap.owner_id !== user.id) {
      return { success: false, error: new Error("Not authorized") };
    }

    // Soft delete the post by setting deleted_at
    const { error: deleteError } = await supabase
      .from("posts")
      .update({
        deleted_at: new Date().toISOString(),
        updated_by: user.id
      })
      .eq("id", postId);

    if (deleteError) {
      return { success: false, error: new Error(deleteError.message) };
    }

    revalidatePath(`/roadmaps/${post.roadmap_id}`);
    return { success: true, error: null };
  } catch (error: any) {
    return { success: false, error };
  }
}

export async function updatePostStatus(
  postId: string,
  statusId: string,
  order: number
): Promise<{ success: boolean; error: Error | null }> {
  try {
    const supabase = await createClient();
    const { data: { user } } = await supabase.auth.getUser();

    if (!user) {
      return { success: false, error: new Error("Not authenticated") };
    }

    // Get post to check ownership
    const { data: post, error: postError } = await supabase
      .from("posts")
      .select("roadmap_id")
      .eq("id", postId)
      .single();

    if (postError || !post) {
      return { success: false, error: new Error("Post not found") };
    }

    // Check if user has permission
    const { data: roadmap, error: roadmapError } = await supabase
      .from("roadmaps")
      .select("owner_id")
      .eq("id", post.roadmap_id)
      .single();

    if (roadmapError || !roadmap) {
      return { success: false, error: new Error("Roadmap not found") };
    }

    if (roadmap.owner_id !== user.id) {
      return { success: false, error: new Error("Not authorized") };
    }

    // Update post status and order
    const { error: updateError } = await supabase
      .from("posts")
      .update({
        status_id: statusId,
        order_index: order,
        updated_by: user.id,
        updated_at: new Date().toISOString()
      })
      .eq("id", postId);

    if (updateError) {
      return { success: false, error: new Error(updateError.message) };
    }

    revalidatePath(`/roadmaps/${post.roadmap_id}`);
    return { success: true, error: null };
  } catch (error: any) {
    return { success: false, error };
  }
} 